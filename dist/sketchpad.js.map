{"version":3,"file":"sketchpad.js","mappings":"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","sources":["webpack://Sketchpad/webpack/universalModuleDefinition","webpack://Sketchpad/./src/sketchpad.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"responsive-sketchpad\"] = factory();\n\telse\n\t\troot[\"Sketchpad\"] = factory();\n})(self, function() {\nreturn ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Sketchpad = /** @class */ (function () {\n    function Sketchpad(el, opts) {\n        this.sketching = false;\n        this._strokes = []; // v2.0 - Rename to strokes\n        this.undoneStrokes = [];\n        this.readOnly = false;\n        this.aspectRatio = 1; // v2.0 - Remove; rely on canvas as source-of-truth\n        this.lineWidth = 5;\n        this.lineColor = '#000';\n        this.lineCap = 'round';\n        this.lineJoin = 'round';\n        this.lineMiterLimit = 10;\n        if (el == null) {\n            throw new Error('Must pass in a container element');\n        }\n        if (opts != null) {\n            this.setOptions(opts);\n        }\n        this.canvas = document.createElement('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        var width = (opts === null || opts === void 0 ? void 0 : opts.width) || el.clientWidth;\n        var height = (opts === null || opts === void 0 ? void 0 : opts.height) || width * this.aspectRatio;\n        this.setCanvasSize(width, height);\n        el.appendChild(this.canvas);\n        if (this._strokes.length > 0) {\n            this.redraw();\n        }\n        this.listen();\n    }\n    Object.defineProperty(Sketchpad.prototype, \"strokes\", {\n        // v2.0 - Remove; rename `_strokes`\n        get: function () {\n            return this._strokes.map(function (s) { return s.toObj(); });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Sketchpad.prototype, \"undos\", {\n        // v2.0 - Remove\n        get: function () {\n            return this.undoneStrokes.map(function (s) { return s.toObj(); });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Sketchpad.prototype, \"opts\", {\n        // v2.0 - Remove\n        get: function () {\n            return {\n                backgroundColor: this.backgroundColor,\n                readOnly: this.readOnly,\n                width: this.canvas.width,\n                height: this.canvas.height,\n                aspectRatio: this.canvas.width / this.canvas.height,\n                line: {\n                    size: this.lineWidth,\n                    color: this.lineColor,\n                    cap: this.lineCap,\n                    join: this.lineJoin,\n                    miterLimit: this.lineMiterLimit,\n                },\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // Convert the sketchpad to a JSON object that can be loaded into\n    // other sketchpads or stored on a server\n    Sketchpad.prototype.toJSON = function () {\n        return {\n            aspectRatio: this.canvas.width / this.canvas.height,\n            strokes: this.strokes,\n        };\n    };\n    // Load a json object into the sketchpad\n    Sketchpad.prototype.loadJSON = function (data) {\n        var strokeObjs = data.strokes || [];\n        this._strokes = strokeObjs.map(function (s) { return Stroke.fromObj(s); });\n        this.redraw();\n    };\n    // Converts to image File\n    Sketchpad.prototype.toDataURL = function (type) {\n        return this.canvas.toDataURL(type);\n    };\n    // Set the size of canvas\n    Sketchpad.prototype.setCanvasSize = function (width, height) {\n        this.canvas.setAttribute('width', width.toString());\n        this.canvas.setAttribute('height', height.toString());\n        this.canvas.style.width = width + 'px';\n        this.canvas.style.height = height + 'px';\n    };\n    // Get the size of the canvas\n    Sketchpad.prototype.getCanvasSize = function () {\n        return {\n            width: this.canvas.width,\n            height: this.canvas.height,\n        };\n    };\n    // Set the line width\n    Sketchpad.prototype.setLineWidth = function (width) {\n        this.lineWidth = width;\n    };\n    // Set the line width\n    Sketchpad.prototype.setLineSize = function (size) {\n        this.lineWidth = size;\n    };\n    // Set the line color\n    Sketchpad.prototype.setLineColor = function (color) {\n        this.lineColor = color;\n    };\n    // Set whether or not new strokes can be drawn on the canvas\n    Sketchpad.prototype.setReadOnly = function (readOnly) {\n        this.readOnly = readOnly;\n    };\n    // Undo the last stroke\n    Sketchpad.prototype.undo = function () {\n        if (this._strokes.length === 0) {\n            return;\n        }\n        this.undoneStrokes.push(this._strokes.pop());\n        this.redraw();\n    };\n    // Redo the last undone stroke\n    Sketchpad.prototype.redo = function () {\n        if (this.undoneStrokes.length === 0) {\n            return;\n        }\n        this._strokes.push(this.undoneStrokes.pop());\n        this.redraw();\n    };\n    // Clear the sketchpad\n    Sketchpad.prototype.clear = function () {\n        this.undoneStrokes = [];\n        this._strokes = [];\n        this.redraw();\n    };\n    // Draw a straight line\n    Sketchpad.prototype.drawLine = function (start, end, lineOpts) {\n        this.setOptions({ line: lineOpts });\n        start = this.getPointRelativeToCanvas(new Point(start.x, start.y));\n        end = this.getPointRelativeToCanvas(new Point(end.x, end.y));\n        this.pushStroke([start, end]);\n        this.redraw();\n    };\n    // Resize the canvas maintaining original aspect ratio\n    Sketchpad.prototype.resize = function (width) {\n        var height = width * this.aspectRatio;\n        this.lineWidth = this.lineWidth * (width / this.canvas.width);\n        this.setCanvasSize(width, height);\n        this.redraw();\n    };\n    // Returns a points x,y locations relative to the size of the canvas\n    Sketchpad.prototype.getPointRelativeToCanvas = function (point) {\n        return {\n            x: point.x / this.canvas.width,\n            y: point.y / this.canvas.height,\n        };\n    };\n    //  Get the line size relative to the size of the canvas\n    Sketchpad.prototype.getLineSizeRelativeToCanvas = function (width) {\n        return width / this.canvas.width;\n    };\n    Sketchpad.prototype.setOptions = function (opts) {\n        var _a, _b, _c, _d, _e, _f;\n        if (opts.backgroundColor) {\n            this.backgroundColor = opts.backgroundColor;\n        }\n        if ((_a = opts.line) === null || _a === void 0 ? void 0 : _a.size) {\n            this.lineWidth = opts.line.size;\n        }\n        if ((_b = opts.line) === null || _b === void 0 ? void 0 : _b.cap) {\n            this.lineCap = opts.line.cap;\n        }\n        if ((_c = opts.line) === null || _c === void 0 ? void 0 : _c.join) {\n            this.lineJoin = opts.line.join;\n        }\n        if ((_d = opts.line) === null || _d === void 0 ? void 0 : _d.miterLimit) {\n            this.lineMiterLimit = opts.line.miterLimit;\n        }\n        if (opts.aspectRatio) {\n            this.aspectRatio = opts.aspectRatio;\n        }\n        if (opts.data) {\n            this._strokes = (_f = (_e = opts.data.strokes) === null || _e === void 0 ? void 0 : _e.map(function (s) { return Stroke.fromObj(s); })) !== null && _f !== void 0 ? _f : [];\n        }\n        if (opts.onDrawEnd) {\n            this.onDrawEnd = opts.onDrawEnd;\n        }\n    };\n    // For a given event, get the point at which the event occurred\n    // relative to the canvas\n    Sketchpad.prototype.getCursorRelativeToCanvas = function (e) {\n        var point;\n        var rect = this.canvas.getBoundingClientRect();\n        if (isTouchEvent(e)) {\n            var touchEvent = e;\n            point = new Point(touchEvent.touches[0].clientX - rect.left, touchEvent.touches[0].clientY - rect.top);\n        }\n        else {\n            var mouseEvent = e;\n            point = new Point(mouseEvent.clientX - rect.left, mouseEvent.clientY - rect.top);\n        }\n        return new Point(point.x / this.canvas.width, point.y / this.canvas.height);\n    };\n    Sketchpad.prototype.normalizePoint = function (p) {\n        return new Point(p.x * this.canvas.width, p.y * this.canvas.height);\n    };\n    Sketchpad.prototype.getLineWidthRelativeToCanvas = function (size) {\n        return size / this.canvas.width;\n    };\n    Sketchpad.prototype.normalizeLineWidth = function (width) {\n        return width * this.canvas.width;\n    };\n    // Erase the entire canvas\n    Sketchpad.prototype.clearCanvas = function () {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        if (this.backgroundColor) {\n            this.ctx.fillStyle = this.backgroundColor;\n            this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        }\n    };\n    // Draw a single stroke\n    Sketchpad.prototype.drawStroke = function (stroke) {\n        if (stroke.points == null)\n            return;\n        this.ctx.beginPath();\n        for (var i = 0; i < stroke.points.length - 1; i++) {\n            var start = this.normalizePoint(stroke.points[i]);\n            var end = this.normalizePoint(stroke.points[i + 1]);\n            this.ctx.moveTo(start.x, start.y);\n            this.ctx.lineTo(end.x, end.y);\n        }\n        this.ctx.closePath();\n        if (stroke.color) {\n            this.ctx.strokeStyle = stroke.color;\n        }\n        if (stroke.width) {\n            this.ctx.lineWidth = this.normalizeLineWidth(stroke.width);\n        }\n        if (stroke.join) {\n            this.ctx.lineJoin = stroke.join;\n        }\n        if (stroke.cap) {\n            this.ctx.lineCap = stroke.cap;\n        }\n        if (stroke.miterLimit) {\n            this.ctx.miterLimit = stroke.miterLimit;\n        }\n        this.ctx.stroke();\n    };\n    Sketchpad.prototype.pushStroke = function (points) {\n        this._strokes.push(Stroke.fromObj({\n            points: points,\n            size: this.getLineWidthRelativeToCanvas(this.lineWidth),\n            color: this.lineColor,\n            cap: this.lineCap,\n            join: this.lineJoin,\n            miterLimit: this.lineMiterLimit,\n        }));\n    };\n    Sketchpad.prototype.pushPoint = function (point) {\n        var stroke = this._strokes[this._strokes.length - 1];\n        if (stroke.points) {\n            stroke.points.push(point);\n        }\n    };\n    // Redraw the whole canvas\n    Sketchpad.prototype.redraw = function () {\n        var _this = this;\n        this.clearCanvas();\n        this._strokes.forEach(function (s) { return _this.drawStroke(s); });\n    };\n    Sketchpad.prototype.listen = function () {\n        var _this = this;\n        ['mousedown', 'touchstart'].forEach(function (name) {\n            return _this.canvas.addEventListener(name, function (e) { return _this.startStrokeHandler(e); });\n        });\n        ['mousemove', 'touchmove'].forEach(function (name) { return _this.canvas.addEventListener(name, function (e) { return _this.drawStrokeHandler(e); }); });\n        ['mouseup', 'mouseleave', 'touchend'].forEach(function (name) {\n            return _this.canvas.addEventListener(name, function (e) { return _this.endStrokeHandler(e); });\n        });\n    };\n    Sketchpad.prototype.startStrokeHandler = function (e) {\n        e.preventDefault();\n        if (this.readOnly) {\n            return;\n        }\n        this.sketching = true;\n        var point = this.getCursorRelativeToCanvas(e);\n        this.pushStroke([point]);\n        this.redraw();\n    };\n    Sketchpad.prototype.drawStrokeHandler = function (e) {\n        e.preventDefault();\n        if (!this.sketching)\n            return;\n        var point = this.getCursorRelativeToCanvas(e);\n        this.pushPoint(point);\n        this.redraw();\n    };\n    Sketchpad.prototype.endStrokeHandler = function (e) {\n        e.preventDefault();\n        if (!this.sketching)\n            return;\n        this.sketching = false;\n        if (isTouchEvent(e)) {\n            return; // touchend events do not have a position\n        }\n        var point = this.getCursorRelativeToCanvas(e);\n        this.pushPoint(point);\n        this.redraw();\n        if (this.onDrawEnd) {\n            this.onDrawEnd();\n        }\n    };\n    return Sketchpad;\n}());\nexports.default = Sketchpad;\nfunction isTouchEvent(e) {\n    return e.type.indexOf('touch') !== -1; // v2.0 - Switch to startsWith\n}\nvar Point = /** @class */ (function () {\n    function Point(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    return Point;\n}());\nvar Stroke = /** @class */ (function () {\n    function Stroke() {\n    }\n    Stroke.fromObj = function (s) {\n        var stroke = new Stroke();\n        stroke.points = s.points;\n        stroke.width = s.size;\n        stroke.color = s.color;\n        stroke.cap = s.cap;\n        stroke.join = s.join;\n        stroke.miterLimit = s.miterLimit;\n        return stroke;\n    };\n    Stroke.prototype.toObj = function () {\n        return {\n            points: this.points,\n            size: this.width,\n            color: this.color,\n            cap: this.cap,\n            join: this.join,\n            miterLimit: this.miterLimit,\n        };\n    };\n    return Stroke;\n}());\n"],"names":["root","factory","exports","module","define","amd","self","Sketchpad","el","opts","this","sketching","_strokes","undoneStrokes","readOnly","aspectRatio","lineWidth","lineColor","lineCap","lineJoin","lineMiterLimit","Error","setOptions","canvas","document","createElement","ctx","getContext","width","clientWidth","height","setCanvasSize","appendChild","length","redraw","listen","Object","defineProperty","prototype","get","map","s","toObj","enumerable","configurable","backgroundColor","line","size","color","cap","join","miterLimit","toJSON","strokes","loadJSON","data","strokeObjs","Stroke","fromObj","toDataURL","type","setAttribute","toString","style","getCanvasSize","setLineWidth","setLineSize","setLineColor","setReadOnly","undo","push","pop","redo","clear","drawLine","start","end","lineOpts","getPointRelativeToCanvas","Point","x","y","pushStroke","resize","point","getLineSizeRelativeToCanvas","_a","_b","_c","_d","_e","_f","onDrawEnd","getCursorRelativeToCanvas","e","rect","getBoundingClientRect","isTouchEvent","touchEvent","touches","clientX","left","clientY","top","mouseEvent","normalizePoint","p","getLineWidthRelativeToCanvas","normalizeLineWidth","clearCanvas","clearRect","fillStyle","fillRect","drawStroke","stroke","points","beginPath","i","moveTo","lineTo","closePath","strokeStyle","pushPoint","_this","forEach","name","addEventListener","startStrokeHandler","drawStrokeHandler","endStrokeHandler","preventDefault","indexOf"],"sourceRoot":""}